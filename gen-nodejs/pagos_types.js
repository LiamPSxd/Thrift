//
// Autogenerated by Thrift Compiler (0.18.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
var Pago = module.exports.Pago = function(args) {
  this.id = null;
  this.folio = null;
  this.titular = null;
  this.concepto = null;
  this.cantidad = null;
  this.estado = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.folio !== undefined && args.folio !== null) {
      this.folio = args.folio;
    }
    if (args.titular !== undefined && args.titular !== null) {
      this.titular = args.titular;
    }
    if (args.concepto !== undefined && args.concepto !== null) {
      this.concepto = args.concepto;
    }
    if (args.cantidad !== undefined && args.cantidad !== null) {
      this.cantidad = args.cantidad;
    }
    if (args.estado !== undefined && args.estado !== null) {
      this.estado = args.estado;
    }
  }
};
Pago.prototype = {};
Pago.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.id = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.folio = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.titular = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.concepto = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.cantidad = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.estado = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Pago.prototype.write = function(output) {
  output.writeStructBegin('Pago');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I16, 1);
    output.writeI16(this.id);
    output.writeFieldEnd();
  }
  if (this.folio !== null && this.folio !== undefined) {
    output.writeFieldBegin('folio', Thrift.Type.I32, 2);
    output.writeI32(this.folio);
    output.writeFieldEnd();
  }
  if (this.titular !== null && this.titular !== undefined) {
    output.writeFieldBegin('titular', Thrift.Type.STRING, 3);
    output.writeString(this.titular);
    output.writeFieldEnd();
  }
  if (this.concepto !== null && this.concepto !== undefined) {
    output.writeFieldBegin('concepto', Thrift.Type.STRING, 4);
    output.writeString(this.concepto);
    output.writeFieldEnd();
  }
  if (this.cantidad !== null && this.cantidad !== undefined) {
    output.writeFieldBegin('cantidad', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.cantidad);
    output.writeFieldEnd();
  }
  if (this.estado !== null && this.estado !== undefined) {
    output.writeFieldBegin('estado', Thrift.Type.BOOL, 6);
    output.writeBool(this.estado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

